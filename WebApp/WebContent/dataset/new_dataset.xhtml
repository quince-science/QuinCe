<ui:composition xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://xmlns.jcp.org/jsf/html"
  xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:p="http://primefaces.org/ui" xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
  xmlns:c="http://java.sun.com/jsp/jstl/core"
  template="/WEB-INF/templates/basic_page.xhtml">
  <ui:define name="title">New Dataset</ui:define>
  <ui:define name="localHead">
    <h:outputScript name="script/dataSets.js" />
    <h:outputScript name="script/vis-timeline-graph2d.min.js" />
    <h:outputScript name="script/dateFormat.js" />
    <h:outputStylesheet name="style/vis-timeline-graph2d.min.css" />
    <h:outputStylesheet name="style/dataSets.css" />
  </ui:define>
  <ui:define name="pageTitle">#{dataSetsBean.currentInstrument.name} - New Data Set</ui:define>
  <ui:define name="content">
    <p:dialog header="Invalid dataset" widgetVar="invalidDatasetDlg" modal="true">
      You selected an area that already has a data set defined.
      <h:panelGrid columns="1" cellpadding="5" class="buttonPanel">
        <p:button
          value="OK"
          onclick="PF('invalidDatasetDlg').hide();return false;" />
      </h:panelGrid>
    </p:dialog>
    <h:form id="uploadForm" method="post" charset="utf8">
      <f:passThroughAttribute name="data-valid-calibration"
        value="#{dataSetsBean.validCalibration}" />
      <f:passThroughAttribute name="data-valid-calibration-message"
        value="#{dataSetsBean.validCalibrationMessage}" />
      <div class="fullPage">
        <div id="timelineContainer"></div>
        <script>
          let groups = JSON.parse('#{dataSetsBean.fileDefinitionsJson}');
          let dataSetJSON = JSON.parse('#{dataSetsBean.timelineEntriesJson}');
          let calibrationsJSON = JSON.parse('#{dataSetsBean.calibrationsJson}');

          // Convert dates to date objects
          dataSetJSON.map(function (row) {
            row.start = new Date(row.start);
            row.end = new Date(row.end);
          });

          let filesAndDataSets =  new vis.DataSet(dataSetJSON);
          let dataSetNames = JSON.parse('#{dataSetsBean.dataSetNamesJson}');
          let timeline = new vis.Timeline(timelineContainer, filesAndDataSets, groups, TIMELINE_OPTIONS);
          timeline.on('click', function (event) {
            if (event.item) {
              setRangeFromClick(event.time, filesAndDataSets)
            }
          });

          // Add calibrations to timeline
          let calibCount = 0;
          for (let [time, types] of Object.entries(calibrationsJSON)) {
            let typeString = '';

            for (type of types) {
              if (typeString.length > 0) {
                typeString += '/';
              }

              typeString += calibration_names[type];
            }

            calibCount++;
            let time_id = timeline.addCustomTime(new Date(time), 'c' + calibCount);
            timeline.setCustomTimeMarker(typeString, time_id, false);
            setCustomTimeClass(timeline, time_id, 'calibration-time');
          }

          // Set up timeline limits
          let timelineMin = dataSetJSON[0].start;
          let timelineMax = dataSetJSON[dataSetJSON.length - 1].end;

          if (Object.keys(calibrationsJSON).length &gt; 0) {
            let firstCalibrationTime = new Date(Object.keys(calibrationsJSON)[0]);
            if (firstCalibrationTime &lt; timelineMin) {
              timelineMin = firstCalibrationTime;
            }

            let lastCalibrationTime = new Date(Object.keys(calibrationsJSON)[Object.keys(calibrationsJSON).length - 1]);
            if (lastCalibrationTime &gt; timelineMax) {
              timelineMax = lastCalibrationTime;
            }
          }

          $(document).ready(function() {
            // Make sure DOM is loaded before calling this
            PF('pAddButton').disable();
            timeline.setWindow(timelineMin, timelineMax, {animation: false});
          });
        </script>
        <h:panelGrid columns="2" cellpadding="5" class="buttonPanel">
          <p:outputLabel for="dataSetName" value="Data Set Name:" />
          <p:inputText id="dataSetName" widgetVar="pDataSetName"
            value="#{dataSetsBean.newDataSet.name}"
            onkeyup="processNewDataSet();"
            pt:data-platform-code="#{dataSetsBean.currentInstrument.platformCode}" />
          <p:outputLabel for="startDate" value="Start Date" />
          <p:outputLabel for="endDate" value="End Date" />
          <p:datePicker id="startDate" widgetVar="startDate"
            value="#{dataSetsBean.newDataSet.start}" timeInput="true"
            pattern="yyyy-MM-dd HH:mm:ss"
            monthNavigator="true" yearNavigator="true"
            onMonthChange="autoSelectDay"
            onYearChange="autoSelectDay"
            onchange="processNewDataSet('start');">
          </p:datePicker>
          <p:datePicker id="endDate" widgetVar="endDate"
            value="#{dataSetsBean.newDataSet.end}" timeInput="true"
            pattern="yyyy-MM-dd HH:mm:ss"
            monthNavigator="true" yearNavigator="true"
            onMonthChange="autoSelectDay"
            onYearChange="autoSelectDay"
            onchange="processNewDataSet();">
          </p:datePicker>
        </h:panelGrid>
        <div id="errorList" class="errors hidden"></div>
      </div>
      <h:panelGrid columns="1" class="buttonPanel">
        <div class="instructions">
          Note: The dataset dates may change to align with valid data in the files.
        </div>
      </h:panelGrid>
      <h:panelGrid columns="2" cellpadding="5" class="buttonPanel">
        <p:commandButton id="addButton" widgetVar="pAddButton"
          value="Add Data Set"
          onclick="checkCalibrationProcessForm(); return false;" />
        <p:commandButton value="Cancel" ajax="false"
          action="#{dataSetsBean.goToList}" immediate="true" />
      </h:panelGrid>
      <p:remoteCommand name="checkCalibrationProcessForm"
        actionListener="#{dataSetsBean.checkValidCalibration}"
        update="uploadForm" oncomplete="processNewDataSet('submit')" />
      <p:remoteCommand name="addDataSet"
        actionListener="#{dataSetsBean.addDataSet}"
        oncomplete="window.location.href='dataset_list.xhtml'" />
    </h:form>
  </ui:define>
</ui:composition>
