package uk.ac.exeter.QuinCe.data.Dataset.QC;

import java.util.Objects;

import uk.ac.exeter.QuinCe.data.Dataset.QC.DataReduction.DataReductionQCRoutinesConfiguration;
import uk.ac.exeter.QuinCe.data.Dataset.QC.SensorValues.AbstractQCRoutinesConfiguration;
import uk.ac.exeter.QuinCe.web.system.ResourceManager;

/**
 * Instance of a QC {@link Flag} generated by an automatic QC {@link Routine}.
 *
 * <p>
 * This is an extended version of the {@link Flag} that also keeps details of:
 * </p>
 *
 * <ul>
 * <li>Which {@link Routine} created the flag</li>
 * <li>The expected value that was violated and caused the flag to be
 * raised</li>
 * <li>The encountered invalid value</li>
 * </ul>
 *
 * <p>
 * The class also provides shortcut methods to get the human-readable QC
 * messages from the originating {@link Routine}.
 * </p>
 */
public class RoutineFlag extends Flag {

  /**
   * The name of the {@link Routine} that created the flag.
   *
   * See {@link AbstractQCRoutinesConfiguration} for information on how routines
   * are named.
   */
  protected final String routineName;

  /**
   * The value required by the routine.
   */
  private final String requiredValue;

  /**
   * The actual (invalid) value encountered.
   */
  private final String actualValue;

  /**
   * Create a Flag related to a specific automatic QC routine.
   *
   * @param routine
   *          The source of the flag.
   * @param flag
   *          The flag value.
   * @param requiredValue
   *          The value required by the routine.
   * @param actualValue
   *          The actual (invalid) value encountered.
   */
  public RoutineFlag(Routine routine, Flag flag, String requiredValue,
    String actualValue) {
    super(flag);
    this.routineName = routine.getName();
    this.requiredValue = requiredValue;
    this.actualValue = actualValue;
  }

  /**
   * Get a concrete instance of the {@link Routine} that generated this flag.
   *
   * The {@link #routineName} is examined to determine what type of
   * {@link Routine} it is, and retrieves the instance from the corresponding
   * concrete instantiation of {@link AbstractQCRoutinesConfiguration}.
   *
   * @return The Routine instance.
   * @throws RoutineException
   *           If the method cannot determine how to identify the originating
   *           routine.
   */
  protected Routine getRoutineInstance() throws RoutineException {

    Routine result;

    String[] routineNameParts = routineName.split("\\.");

    switch (routineNameParts[0]) {
    case "SensorValues": {
      result = ResourceManager.getInstance().getQCRoutinesConfiguration()
        .getRoutine(routineName);
      break;
    }
    case "ExternalStandards": {
      result = ResourceManager.getInstance()
        .getExternalStandardsRoutinesConfiguration().getRoutine(routineName);
      break;
    }
    case "DataReduction": {
      result = DataReductionQCRoutinesConfiguration.getRoutine(routineName);
      break;
    }
    default: {
      throw new RoutineException(
        "Cannot determine routine type " + routineNameParts[0]);
    }
    }

    return result;
  }

  /**
   * Get the name of the {@link Routine} that generated this flag.
   *
   * The name is human-readable, and also used by {@link #getRoutineInstance()}
   * to obtain a concrete instance of the {@link Routine}.
   *
   * @return The routine name.
   */
  public String getRoutineName() {
    return routineName;
  }

  /**
   * Get the short message for the routine attached to this flag.
   *
   * @return The message
   * @throws RoutineException
   *           If the message cannot be retrieved
   */
  public String getShortMessage() throws RoutineException {
    return getRoutineInstance().getShortMessage();
  }

  /**
   * Get the long message for the routine attached to this flag.
   *
   * @return The message
   * @throws RoutineException
   *           If the message cannot be retrieved
   */
  public String getLongMessage() throws RoutineException {
    return getRoutineInstance().getLongMessage(this);
  }

  /**
   * Get the value required that would have passed the QC check.
   *
   * @return The required value.
   */
  public String getRequiredValue() {
    return requiredValue;
  }

  /**
   * Get the actual value encountered, which did not match the required value.
   *
   * @return The encountered value.
   */
  public String getActualValue() {
    return actualValue;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    result = prime * result + Objects.hash(getFlagValue(), routineName);
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!super.equals(obj))
      return false;
    if (getClass() != obj.getClass())
      return false;
    RoutineFlag other = (RoutineFlag) obj;
    return Objects.equals(getFlagValue(), other.getFlagValue())
      && Objects.equals(routineName, other.routineName);
  }

}
